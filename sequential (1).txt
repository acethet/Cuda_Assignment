%%cu
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <assert.h>

void init_matrix(float *m, int height, int width) {
    for (int i = 0; i < height*width; i++) {
        m[i] = rand() / (float)RAND_MAX;
    }
}

void MatrixMul(float *M, float *N, float *P, int M_height, int M_width, int N_width) {
    for (int row = 0; row < M_height; ++row) {
        for (int col = 0; col < N_width; ++col) {
            float sum = 0;
            for (int i = 0; i < M_width; ++i) {
                sum += M[row * M_width + i] * N[i * N_width + col];
            }
            P[row * N_width + col] = sum;
        }
    }
}

int main()
{
    int M_height = 800;
    int M_width = 1000;
    int N_height = M_width;
    int N_width = 600;

    size_t size_M = M_height * M_width * sizeof(float);
    size_t size_N = N_height * N_width * sizeof(float);
    size_t size_P = M_height * N_width * sizeof(float);

    float *h_M = (float *)malloc(size_M);
    float *h_N = (float *)malloc(size_N);
    float *h_P = (float *)malloc(size_P);
    assert(h_M && h_N && h_P);

    srand(time(0));
    init_matrix(h_M, M_height, M_width);
    init_matrix(h_N, N_height, N_width);

    clock_t start = clock();
    MatrixMul(h_M, h_N, h_P, M_height, M_width, N_width);
    clock_t end = clock();

    float elapsed = ((float)(end - start)) / CLOCKS_PER_SEC * 1000;
    printf("Time elapsed = %fms\n", elapsed);

    // Use result in h_P...

    free(h_M); free(h_N); free(h_P);

    return 0;
}
