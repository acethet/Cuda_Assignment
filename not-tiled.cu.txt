%%cu
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <time.h>

#define BLOCK_SIZE 32

__global__ void MatrixMulKernel(float *M, float *N, float *P, int M_width, int N_height, int N_width)
{
    int Row = blockIdx.y * blockDim.y + threadIdx.y;
    int Col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if ((Row < N_height) && (Col < N_width)) {
        float Pvalue = 0;
        for (int k = 0; k < M_width; ++k) {
            Pvalue += M[Row * M_width + k] * N[k * N_width + Col];
        }
        P[Row * N_width + Col] = Pvalue;
    }
}

void init_matrix(float *m, int height, int width) {
    for (int i = 0; i < height*width; i++) {
        m[i] = rand() / (float)RAND_MAX;
    }
}

int main()
{
    int M_height = 800;
    int M_width = 1000;
    int N_height = M_width;
    int N_width = 600;

    size_t size_M = M_height * M_width * sizeof(float);
    size_t size_N = N_height * N_width * sizeof(float);
    size_t size_P = M_height * N_width * sizeof(float);

    float *h_M = (float *)malloc(size_M);
    float *h_N = (float *)malloc(size_N);
    float *h_P = (float *)malloc(size_P);
    assert(h_M && h_N && h_P);

    srand(time(0));
    init_matrix(h_M, M_height, M_width);
    init_matrix(h_N, N_height, N_width);

    float *d_M, *d_N, *d_P;
    cudaMalloc(&d_M, size_M);
    cudaMalloc(&d_N, size_N);
    cudaMalloc(&d_P, size_P);

    cudaMemcpy(d_M, h_M, size_M, cudaMemcpyHostToDevice);
    cudaMemcpy(d_N, h_N, size_N, cudaMemcpyHostToDevice);

    dim3 dimBlock(BLOCK_SIZE, BLOCK_SIZE);
    dim3 dimGrid((N_width + dimBlock.x - 1) / dimBlock.x, (M_height + dimBlock.y - 1) / dimBlock.y);
    
    cudaEvent_t start, stop;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);
    cudaEventRecord(start, 0);

    MatrixMulKernel<<<dimGrid, dimBlock>>>(d_M, d_N, d_P, M_width, N_height, N_width);
    cudaDeviceSynchronize();

    cudaEventRecord(stop, 0);
    cudaEventSynchronize(stop);

    float elapsed;
    cudaEventElapsedTime(&elapsed, start, stop);
    printf("Time elapsed = %fms\n", elapsed);

    cudaMemcpy(h_P, d_P, size_P, cudaMemcpyDeviceToHost);

    // Use result in h_P...

    free(h_M); free(h_N); free(h_P);
    cudaFree(d_M); cudaFree(d_N); cudaFree(d_P);
    cudaEventDestroy(start);
    cudaEventDestroy(stop);

    return 0;
}
